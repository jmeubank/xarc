/** \file xarc_impl.h
 *
 * Created: JohnE, 2010-07-19
 */
#ifndef XARC_IMPL_H_INC
#define XARC_IMPL_H_INC

#ifdef __cplusplus
extern "C" {
#endif


#include <stdio.h>
#include <stddef.h>
#include "xarc.h"


struct _handler_funcs;

/* Struct: xarc_error
 * Details of an error that has occurred in XARC or one of its component
 * libraries.
 */
typedef struct
{
	/* Variable: xarc_id
	 * The xarc error identifier (see <XARC result codes>).
	 */
	xarc_result_t xarc_id;
	/* Variable: library_error_id
	 * If the most recent xarc operation generated an XARC_MODULE_ERROR, an
	 * XARC_DECOMPRESS_ERROR, or an XARC_FILESYSTEM_ERROR, contains the error
	 * code generated by the library in question. For XARC_FILESYSTEM_ERROR,
	 * this will be the value of the standard library's errnum. If none of the
	 * above errors have occurred, will be 0.
	 */
	int32_t library_error_id;
	/* Variable: error_additional
	 * Any additional descriptive text attached to the error, such as actions
	 * being performed and the names of files being processed; or the empty
	 * string ("") if no additional text was generated.
	 */
	xchar* error_additional;
} xarc_error;

struct _xarc
{
	const struct _handler_funcs* impl;
	xarc_error* error;
};

typedef struct _handler_funcs
{
	xarc_result_t (*close)(xarc*);
	xarc_result_t (*next_item)(xarc*);
	xarc_result_t (*item_get_info)(xarc*, xarc_item_info*);
	xarc_result_t (*item_extract)(xarc*, FILE*, size_t*);
	xarc_result_t (*item_set_props)(xarc*, const xchar*);
	const xchar* (*error_description)(xarc*, int32_t);
} handler_funcs;


xarc_result_t xarc_set_error(xarc* x, xarc_result_t status,
 int32_t library_error_id, const xchar* addl_fmt, ...);
xarc_result_t xarc_set_error_filesys(xarc* x, const xchar* addl_fmt, ...);


#define X_BASE(x) ((struct _xarc*)x)

#ifndef XCONCAT2
#define INNER_CONCAT2(a, b) a ## b
#define XCONCAT2(a, b) INNER_CONCAT2(a, b)
#endif

#define XARC_DEFINE_MODULE(name, open_func, extra_size) \
 const size_t XCONCAT2(xarc_extra_size_, name) = extra_size; \
 xarc_result_t (*XCONCAT2(xarc_open_func_, name))(xarc*, const xchar*, uint8_t) = open_func;


#ifdef __cplusplus
} // extern "C"
#endif

#endif // XARC_IMPL_H_INC

/* File: libxarc/xarc_decompress.h
 * A common interface for decompressing a compressed input file.
 *
 * A decompressor in XARC is a set of functions implementing a common interface
 * that reads decompressed data from a compressed input file. An XARC
 * decompressor must implement an open function (see <decomp_open_func>) and
 * use the <XARC_DEFINE_DECOMPRESSOR> macro to link it to a declared 2-phase
 * archive type from <libxarc/modules.inc>. The open function is responsible for
 * creating an object that extends <xarc_decompress_impl>, and populating the
 * base portion of it with appropriate functions for reading data, closing the
 * stream, and retrieving error text.
 */
/* Created: JohnE, 2010-08-02 */

#ifndef XARC_DECOMPRESS_H_INC
#define XARC_DECOMPRESS_H_INC

#ifdef __cplusplus
extern "C" {
#endif


#include "xarc.h"


/* Section: Types */

struct _xarc_decompress_impl;

/* Function: decomp_open_func
 * Base function to implement opening a file for decompression reading. This
 * function must allocate an object that extends <xarc_decompress_impl>, fill
 * out the base members with appropriate decompressor-specific functions, and
 * assign the pointer to the "impl_out" parameter.
 *
 * Parameters:
 *   x - The <xarc> object being used (for setting errors)
 *   path - Path to the file to open for decompression
 *   impl_out - If the file is successfully opened for decompression, will be
 *     set to point to an object that extends <xarc_decompress_impl>
 *
 * Returns:
 *   XARC_OK - If the file was successfully opened for decompression
 *   <xarc_result_t> - Any error that occurred (see <XARC result codes>)
 */
typedef xarc_result_t (*decomp_open_func)(xarc* x, const xchar* path,
 struct _xarc_decompress_impl** impl_out);

/* Struct: xarc_decompress_impl
 * Base functions to implement a decompression reader stream.
 */
typedef struct _xarc_decompress_impl
{
	/* Function: close
	 * Close the decompression stream. This function must free the impl object
	 * that the open function allocated.
	 *
	 * Parameters:
	 *   impl - Pointer to an object extending <xarc_decompress_impl>
	 */
	void (*close)(struct _xarc_decompress_impl* impl);
	/* Function: read
	 * Read decompressed data from the stream.
	 *
	 * Parameters:
	 *   x - The <xarc> object being used (for setting errors)
	 *   impl - Pointer to an object extending <xarc_decompress_impl>
	 *   buffer - Output buffer for decompressed data
	 *   read_inout - Pointer to a size_t that contains the amount of data
	 *     requested when this function is called, and will be set to the amount
	 *     of data actually provided when this function returns
	 *
	 * Returns:
	 *   XARC_OK - If the full amount of data requested was provided
	 *   XARC_DECOMPRESS_EOF - If the end of the decompression stream was
	 *     reached before all requested data could be decompressed
	 *   <xarc_result_t> - Any other error that occurred (see <XARC result
	 *     codes>)
	 */
	xarc_result_t (*read)(xarc* x, struct _xarc_decompress_impl* impl,
	 void* buffer, size_t* read_inout);
	/* Function: error_desc
	 * Return a string describing an error that occurred in the decompression
	 * library.
	 *
	 * Parameters:
	 *   impl - Pointer to an object extending <xarc_decompress_impl>
	 *   error_id - Error code generated by the decompression library
	 *
	 * Returns:
	 *   A string describing the decompression library error.
	 */
	const xchar* (*error_desc)(struct _xarc_decompress_impl* impl,
	 int32_t error_id);
} xarc_decompress_impl;


/* Section: Functions */


/* Function: xarc_decompress_open
 * Open a file for decompression reading.
 *
 * Parameters:
 *   x - The <xarc> object being used (for setting errors)
 *   path - Path to the file to open
 *   decomp_type - ID specifying the type of compression on the file (see
 *     <Decompression types>)
 *   impl_out - If the file is successfully opened for decompression, will be
 *     set to point to an object that extends <xarc_decompress_impl>
 *
 * Returns:
 *   XARC_OK - If the file was successfully opened for decompression
 *   <xarc_result_t> - Any error that occurred (see <XARC result codes>)
 */
xarc_result_t xarc_decompress_open(xarc* x, const xchar* path,
 uint8_t decomp_type, xarc_decompress_impl** impl_out);


#ifndef XCONCAT2
#define INNER_CONCAT2(a, b) a ## b
#define XCONCAT2(a, b) INNER_CONCAT2(a, b)
#endif

/* Macro: XARC_DEFINE_DECOMPRESSOR
 * This macro is used in the decompressor implementations to link the impl to
 * a known 2-phase decompression type from <libxarc/modules.inc>.
 */
#define XARC_DEFINE_DECOMPRESSOR(name, open_func) \
 decomp_open_func XCONCAT2(xarc_decomp_open_func_, name) = open_func;


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif // XARC_DECOMPRESS_H_INC

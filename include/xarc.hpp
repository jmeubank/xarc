/* File: xarc.hpp
 * The XARC user interface. (C++ API)
 */
/* Created: JohnE, 2013-01-04 */

#ifndef XARC_HPP_INC
#define XARC_HPP_INC

#include <string>
#include <utility>
#include <xarc.h>
#include <xarc/string_type.hpp>
#include <xarc/extract_helpers.hpp>

namespace XARC
{

/* Class: Archive
 * Base interface for all XARC C++ archive types.
 *
 * You cannot construct an object of this class to work with an actual archive;
 * instead, you will construct one of the more specific types based on the kind
 * of operations you need to perform on the archive.
 */
class Archive
{
public:
	/* Destructor: ~Archive
	 * Virtual destructor.
	 */
	virtual ~Archive() {}

	/* Method: IsOkay
	 * Check whether the archive is in an errored state.
	 *
	 * Returns:
	 *   TRUE if no errors have been encountered, FALSE if there has been an
	 *   error.
	 *
	 * See also:
	 *    <xarc_ok> (C API)
	 */
	virtual bool IsOkay() const = 0;
	/* Method: GetXarcErrorID
	 * Get the integer ID of the last XARC API error.
	 *
	 * Returns:
     *   <xarc_result_t> - The error code generated by XARC, or 0 if no error
     *     has occurred (see <XARC result codes>)
     *
     * See also:
     *   <xarc_error_id> (C API)
     */
	virtual xarc_result_t GetXarcErrorID() const = 0;
	/* Method: GetLibraryErrorID
	 * Get the integer ID of the last XARC module or decompression library
	 * error.
	 *
	 * Returns:
     *   <xarc_result_t> - The error code generated by a library, or 0 if no
     *     error has occurred.
     *
     * See also:
     *   <xarc_library_error_id> (C API)
     */
	virtual int32_t GetLibraryErrorID() const = 0;
	/* Method: GetErrorDescription
	 * Get a user-friendly string describing the most recent error.
	 *
	 * GetErrorDescription will typically return a stock phrase describing a
	 * general _type_ of error; use <GetErrorAdditional> if you're looking for
	 * specifics of any file names, archive entries, or other relevant data
	 * being worked on at the time of the error.
	 *
	 * Returns:
	 *   A string containing a description of the most recent error.
	 *
     * See also:
     *   <xarc_error_description> (C API)
     */
	virtual StringType GetErrorDescription() const = 0;
	/* Method: GetErrorAdditional
	 * Get any additional situation-specific data about a recent error.
	 *
	 * Returns:
	 *   Any additional information generated at the time of the most recent
	 *   error, regarding specific file names, paths, archive entries, etc.
	 *
     * See also:
     *   <xarc_error_additional> (C API)
     */
	virtual StringType GetErrorAdditional() const = 0;

protected:
	Archive() {}
};

/* Class: ExtractItemInfo
 * Metadata about an archive entry.
 *
 * Retrieve this information with <ExtractArchive::GetItemInfo>.
 */
class ExtractItemInfo
{
public:
	/* Method: GetPath
	 * Get the archive entry's relative path.
	 *
	 * Returns:
	 *   A string containing the relative path of the current entry in the
	 *   archive.
	 */
	StringType GetPath() const;
	/* Method: IsDirectory
	 * Check whether the current archive entry is a directory, not a file.
	 *
	 * Returns:
	 *   TRUE if the current entry is a directory, FALSE if it's a file.
	 */
	bool IsDirectory() const;
	/* Method: GetModTime
	 * Get the current entry's stored time of last modification, if available.
	 *
	 * Returns:
	 *   A std::pair representing the last-modified timestamp of the current
	 *   archive entry. The first member is the number of seconds since the
	 *   Unix epoch (the beginning of 1970, UTC), and the second member is the
	 *   number of nanoseconds since the start of the second.
	 *
	 * See also:
	 *   <xarc_time_t>
	 */
	std::pair< uintmax_t, uint32_t > GetModTime() const;

private:
	friend class ExtractArchive;
	ExtractItemInfo(const xarc_item_info* info);

	xarc_item_info m_info;
	StringType m_path;
};

/* Class: ExtractArchive
 * Read in an archive file and extract its content files.
 */
class ExtractArchive : public Archive
{
public:
	/* Constructor: ExtractArchive
	 * Default constructor.
	 *
	 * Will create an ExtractArchive object that doesn't reference any archive;
	 * <IsOkay> will always return false, and most other methods will always
	 * throw.
	 */
	ExtractArchive();
	/* Constructor: ExtractArchive
	 * Open an archive file by path.
	 *
	 * If the file cannot be opened, the object will still be constructed and
	 * can be queried for the nature of the error, but will not contain any
	 * archive entries for iteration or extraction.
	 *
	 * Parameters:
	 *   file - The path to the archive file to open
	 *   type - Specify the type of the archive (see <XARC archive types>); use
	 *     "0" to autodetect the archive type by the file extension
	 *
	 * See also:
	 *   <xarc_open> (C API)
	 */
	ExtractArchive(const xchar* file, uint8_t type = 0);
	/* Destructor: ~ExtractArchive
	 * Virtual destructor.
	 */
	virtual ~ExtractArchive();

	/* Method: IsOkay
	 * Check whether the archive is in an errored state. See <Archive::IsOkay>
	 */
	virtual bool IsOkay() const;
	/* Method: GetXarcErrorID
	 * Get the integer ID of the last XARC API error. See
	 * <Archive::GetXarcErrorID>
     */
	virtual xarc_result_t GetXarcErrorID() const;
	/* Method: GetLibraryErrorID
	 * Get the integer ID of the last XARC module or decompression library
	 * error. See: <Archive::GetLibraryErrorID>
     */
	virtual int32_t GetLibraryErrorID() const;
	/* Method: GetErrorDescription
	 * Get a user-friendly string describing the most recent error. See
	 * <Archive::GetErrorDescription>
     */
	virtual StringType GetErrorDescription() const;
	/* Method: GetErrorAdditional
	 * Get any additional situation-specific data about a recent error. See
	 * <Archive::GetErrorAdditional>
     */
	virtual StringType GetErrorAdditional() const;

	/* Method: OpenFile
	 * Open an archive file by path.
	 *
	 * If the object already has an archive open, it will be closed before
	 * attempting to open the new one. If the archive file can't be opened
	 * successfully, the object can still be queried for the nature of the
	 * error, but will not contain any archive entries for iteration or
	 * extraction.
	 *
	 * Parameters:
	 *   file - The path to the archive file to open
	 *   type - Specify the type of the archive (see <XARC archive types>); use
	 *     "0" to autodetect the archive type by the file extension
	 *
	 * Returns:
	 *   XARC_OK - If the archive was succesfully opened and is ready to use
	 *   <xarc_result_t> - Any error that may have occurred (see <XARC result
	 *     codes>)
	 *
	 * See also:
	 *   <xarc_open> (C API)
	 */
	xarc_result_t OpenFile(const xchar* file, uint8_t type = 0);
	/* Method: NextItem
	 * Iterate to the next entry in the archive.
	 *
	 * Returns:
	 *   XARC_OK - If there was a next entry in the archive to move to
	 *   XARC_NO_MORE_ITEMS - If the <ExtractArchive> object was already at the
	 *    last entry in the archive
	 *   <xarc_result_t> - Any other error that may have occurred (see <XARC
	 *     result codes>)
	 *
	 * See also:
	 *   <xarc_next_item> (C API)
	 */
	xarc_result_t NextItem();
	/* Method: GetItemInfo
	 * Get the metadata for an archive entry.
	 *
	 * Returns:
	 *   An ExtractItemInfo object containing the current entry's information
	 *
	 * Throws:
	 *   XarcException - If an error was encountered while retrieving the data
	 *
	 * See also:
	 *   <xarc_item_get_info> (C API)
	 */
	ExtractItemInfo GetItemInfo();
	/* Method: ExtractItem
	 * Extract the current archive entry to a new file or directory.
	 *
	 * Starting at the specified base path, creates any necessary subdirectories
	 * specified as part of the current entry's relative path. Then, if the
	 * entry is a file, extracts that file to the resulting path in the
	 * filesystem.
	 *
	 * The templated callback object must be a function, or an instance of a
	 * class with operator (), matching the following signature:
	 * |	void (*)(const StringType& path, uint8_t properties)
	 * If the current archive entry is a file, this functor will receive one
	 * callback providing the file's relative path within the archive, and the
	 * archive entry's property flags (see <XARC entry properties>). Depending
	 * on the extraction flags specified, the functor may also receive further
	 * callbacks; see <XARC extraction flags> for details on how to affect this
	 * behavior.
	 *
	 * Parameters:
	 *   base_path - The base path in the local file system to extract to (if
	 *     the entry contains subdirectories, these will be created below the
	 *     base path)
	 *   flags - Options controlling the extraction process (see <XARC
	 *     extraction flags>)
	 *   callback - Templated callback functor
	 *
	 * Returns:
	 *   The <ExtractArchive> object
	 */
	template< class UserCallback >
	ExtractArchive& ExtractItem(const StringType& base_path, uint8_t flags,
	 UserCallback& callback);

private:
	ExtractArchive& ExtractItemUserCallback(const StringType& base_path,
	 uint8_t flags, ExtractCallback* callback);

	xarc* m_xarc;
};

template< class UserCallback >
ExtractArchive& ExtractArchive::ExtractItem(const StringType& base_path,
 uint8_t flags, UserCallback& callback)
{
	ExtractUserCallback< UserCallback > euc(callback);
	return this->ExtractItemUserCallback(base_path, flags, &euc);
}

}

#endif // XARC_HPP_INC
